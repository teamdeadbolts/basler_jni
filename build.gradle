/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.0.0/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
	id "java"
  id "maven-publish"
	id 'edu.wpi.first.WpilibTools' version '2.1.0'
	id "com.diffplug.spotless" version "7.0.1"
	id "edu.wpi.first.GradleRIO" version "2025.3.2"
}

group = 'org.teamdeadbolts'
version = 'local'

allprojects {
  repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    mavenLocal()
  }
}

ext {
  wpilibVersion = "2025.3.2"
  wpimathVersion = wpilibVersion
  openCVversion = "4.10.0-3"

  pylonRoot = project.hasProperty('pylonRoot') ? project.property('pylonRoot') : "/opt/pylon"
}

wpi.getVersions().getOpencvVersion().convention(openCVversion);
wpi.getVersions().getWpilibVersion().convention(wpilibVersion);
wpi.getVersions().getWpimathVersion().convention(wpimathVersion);
wpilibTools.deps.wpilibVersion = wpilibVersion

java {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17

  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

dependencies {
	implementation wpilibTools.deps.wpilibJava("wpiutil")
	implementation wpilibTools.deps.wpilibOpenCvJava("frc" + wpi.frcYear.get(), wpi.versions.opencvVersion.get())
	
  testImplementation libs.junit.jupiter
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


ext.nativeName = wpilibTools.platformMapper.currentPlatform.platformName;

ext.outputsFolder = file("$buildDir/outputs");

println("Building for platform $nativeName");



tasks.named('test') {
	useJUnitPlatform()

	testLogging {
		showStandardStreams = true
	}

	def parts = []
	parts << "$buildDir/outputs/nativelibraries/$nativeName"
  parts << "$pylonRoot/lib"
	def ldPath = System.getenv("LD_LIBRARY_PATH")
	if (ldPath != null) parts << ldPath
	parts << System.getProperty("java.library.path")

	systemProperty "java.library.path", parts.join(File.pathSeparator)
}


tasks.register('configureNative', Exec) {
	group = 'build'
	description = 'Configures CMake with Pylon SDK paths'
	
	workingDir = "$projectDir"
	
	def buildType = project.hasProperty('buildType') ? project.property('buildType') : 'Release'
	
	commandLine 'bash', '-c', "cmake -B cmake_build -S . -DPYLON_ROOT=$pylonRoot -DCMAKE_BUILD_TYPE=$buildType"
	
	outputs.file("$projectDir/cmake_build/CMakeCache.txt")
	inputs.files(fileTree("$projectDir/src/main/native"))
	inputs.file("$projectDir/CMakeLists.txt")
}

tasks.register('buildNative', Exec) {
	group = 'build'
	description = 'Builds native library using CMake'
	
	dependsOn configureNative
	
	workingDir "$projectDir"
	
	def parallelJobs = project.hasProperty('parallelJobs') ? project.property('parallelJobs') : Runtime.runtime.availableProcessors()
	
	commandLine 'bash', '-c', "cmake --build cmake_build --parallel ${parallelJobs.toString()}"
	
	inputs.files(fileTree("$projectDir/src/main/native"))
	outputs.files(fileTree("$projectDir/cmake_build"))
}

tasks.register('cleanNative', Delete) {
	group = 'build'
	description = 'Cleans CMake build directory'
	
	delete "$projectDir/cmake_build"
}

tasks.register('copyNative', Copy) {
	group = 'build'
	description = 'Copies native library to outputs folder'
	
	dependsOn buildNative
	
	from "$projectDir/cmake_build"
	into "$outputsFolder/nativelibraries/$nativeName"
	include "*.so"

	eachFile {
		println("Copying native library: $name")
		path = name
	}
	includeEmptyDirs = false
}

tasks.register("generateJniHeaders", JavaCompile) {
	group = "build"
	description = "Generates JNI headers for AmdJNI"

	source = fileTree("src/main/java") {
		include "org/teamdeadbolts/basler/*.java"
	}

	classpath = sourceSets.main.compileClasspath
	destinationDirectory = file("$buildDir/classes/java/main")
	options.compilerArgs = [
		"-h", "$projectDir/src/main/native/include"
	]
}

build.dependsOn copyNative
test.dependsOn copyNative

def nativeConfigName = "wpilibNatives"
def nativeConfig = configurations.create(nativeConfigName)

def nativeTasks = wpilibTools.createExtractionTasks {
configurationName = nativeConfigName
}

jar {
  dependsOn copyNative

  from("$outputsFolder/nativelibraries/$nativeName") {
    into "nativelibraries/$nativeName"
  }

  manifest {
    attributes(
      'Implementation-Title': 'Basler JNI',
      'Implementation-Version': version,
      'Native-Platform': nativeName,
    )
  }
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java

      groupId = 'org.teamdeadbolts'
      artifactId = "basler_jni-${nativeName}"
      version = project.version

      pom {
        name = 'Basler JNI'
        description = 'Java bindings to interact with Basler Cameras'
        url = 'https://github.com/teamdeadbolts/basler_jni'

        licenses {
          license {
            name = 'The MIT License'
            url = 'https://opensource.org/license/mit/'
          }
        }

        developers {
          developer {
            id = 'totaltaxamount'
            name = 'TotalTaxAmount'
          }
        }
      }
    }
  }

  repositories {
    mavenLocal()
    maven {
      name = 'GitHubPackages'
      url = uri('https://maven.pkg.github.com/teamdeadbolts/basler_jni')
      credentials {
        username = System.getenv("GITHUB_ACTOR");
        password = System.getenv("GITHUB_TOKEN");
      }
    }
  }
}

spotless {
	format 'misc', {
		target '.gitignore', '*.json'

		trimTrailingWhitespace()
		leadingSpacesToTabs()
		endWithNewline()
	}

	java {
		googleJavaFormat('1.25.2').aosp().reflowLongStrings() // Google formatting is probably good
		formatAnnotations()

		licenseHeader '/* Team Deadbolts (C) $YEAR */'
	}
}
